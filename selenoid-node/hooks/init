{{#if cfg.platform.linux }}

{{ #each cfg.settings.browsers.chrome.docker.versions as |version| ~}}
docker pull selenoid/vnc:chrome_{{version.browser}}
{{/each ~}}

{{#each cfg.settings.browsers.firefox.docker.versions as |version| ~}}
docker pull selenoid/vnc:firefox_{{version.browser}}
{{/each ~}}

{{/if}}

{{#if cfg.platform.windows }}
echo "hello from windows!"

$headless_selenium_for_win_pkg = "qago/headless-selenium-for-win"

if (-Not $(hab pkg env $headless_selenium_for_win_pkg)) {
   hab pkg install $headless_selenium_for_win_pkg -c unstable
}

{{ #each cfg.settings.browsers.chrome.windows.versions as |version| ~}}
$chrome_pkg = "qago/google-chrome/$("{{version.browser}}"  -replace 'w','')"
$chromedriver_pkg = "qago/chromedriver/{{version.driver}}"

if (-Not $(hab pkg env $chrome_pkg)) {
   hab pkg install $chrome_pkg -c unstable
}
if (-Not $(hab pkg env $chromedriver_pkg)) {
   hab pkg install $chromedriver_pkg -c unstable
}
{{/each }}

{{ #each cfg.settings.browsers.firefox.windows.versions as |version| ~}}
$firefox_pkg = "qago/firefox/$("{{version.browser}}" -replace 'w','')"
$geckodriver_pkg = "qago/geckodriver/{{version.driver}}"

if (-Not $(hab pkg env $firefox_pkg)) {
   hab pkg install $firefox_pkg -c unstable
}
if (-Not $(hab pkg env $geckodriver_pkg)) {
   hab pkg install $geckodriver_pkg -c unstable
}
{{/each }}

{{ #each cfg.settings.browsers.ie.windows.versions as |version| ~}}
$iedriver_pkg = "qago/iedriver/{{version.driver}}"

if (-Not $(hab pkg env $iedriver_pkg)) {
   hab pkg install $iedriver_pkg -c unstable
}
{{/each }}


$selenoid_task_ps1_content=@"
`$env:PATH=`"$env:PATH`"
`$proc=Start-Process -PassThru -NoNewWindow -RedirectStandardOutput {{pkg.svc_data_path}}/selenoid.stdout.log -RedirectStandardError {{pkg.svc_data_path}}/selenoid.stderr.log -FilePath selenoid.exe -ArgumentList `"-conf {{pkg.svc_config_path}}/browsers.json -disable-docker -limit 4`"
`$pid_file=`"{{pkg.svc_path}}/SELENOID_PID`"
New-Item `$pid_file -itemtype file -force | OUT-NULL
Add-Content `$pid_file `$proc.id
Wait-Process `$proc.id
"@
$selenoid_task_ps1_file="{{pkg.svc_config_path}}\selenoid_task.ps1"

New-Item $selenoid_task_ps1_file -itemtype file -force | OUT-NULL
Add-Content $selenoid_task_ps1_file $selenoid_task_ps1_content

c:/Windows/system32/schtasks.exe /Create /RU Administrator /SC ONCE /ST 00:00 /SD 01/01/2099 /RP setup /IT /tn selenoid_task /tr "{{pkgPathFor "core/powershell"}}\bin\pwsh.exe -w Hidden $selenoid_task_ps1_file" /f

{{/if}}
